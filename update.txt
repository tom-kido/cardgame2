
---

# Codex 用：カードテキストの配置・表示を調整

## 変更点（要約）

* **POWER（力量）**：画像に数字/ラベルが描かれているため、重なるテキストは**完全に非表示**
* **SHIKI（式神）**：上部の「カード<番号>」テキストは**非表示**、下部に**力量のみ表示**
* **JYUTSU（術式）**：上部テキストは**非表示**、**下部**に「結界/祓い/封印/解呪」を表示（フレームの「術式」テキストとは重ならない）

---

## 1) `src/constants.js` にラベル座標定数を追加

```diff
 // 既存の定数の下あたりに追記
+// === Text layout (カード上の文字位置) ===
+export const LABEL_Y = {
+  NAME_TOP:   (CARD_H * -0.40), // 上帯（使わない方針だが置いておく）
+  VALUE_BOT:  (CARD_H *  0.36), // 下の数値（式神の力量）
+  JYUTSU_BOT: (CARD_H *  0.30), // 下の術式種類（結界/祓い/封印/解呪）
+};
```

※ 既に `FONT` がある場合はそのまま使います（フォントサイズ調整は不要）。

---

## 2) `src/scene.js`：タイプ別にテキストを出し分ける

### 2-1. import に `LABEL_Y`（と `SPELL_NAME` を使っていればそれも）を追加

```diff
- import { CARD_W, CARD_H, TEX, FONT, CARD_TYPE } from './constants.js';
+ import { CARD_W, CARD_H, TEX, FONT, CARD_TYPE, LABEL_Y, SPELL_NAME } from './constants.js';
```

### 2-2. カード生成：テキストを汎用で作ってからタイプ別調整

```diff
  createCardSprite(cardData) {
    const container = this.add.container(0,0);

    const frameImg = this.add.image(0,0, frameKeyByType(cardData.type))
      .setOrigin(0.5).setDisplaySize(CARD_W, CARD_H);

-   const nameText  = this.add.text(0, -CARD_H*0.40, cardData.name || '', FONT.NAME).setOrigin(0.5);
-   const powerText = this.add.text(0,  CARD_H*0.36, '', FONT.POWER).setOrigin(0.5);
+   const nameText  = this.add.text(0, LABEL_Y.NAME_TOP, '',  FONT.NAME ).setOrigin(0.5);
+   const powerText = this.add.text(0, LABEL_Y.VALUE_BOT,'',  FONT.POWER).setOrigin(0.5);

    container.add([frameImg, nameText, powerText]);

    container._data = cardData;
    container._frame = frameImg;
    container._labelName = nameText;
    container._labelPower = powerText;

+   // タイプ別に可視/内容/位置を整える
+   this.configureLabelsByType(container);

    this.enableDrag(container);
    return container;
  }
```

### 2-3. タイプ別の表示ロジックを追加

```diff
+// タイプ別にテキスト可視状態・文言・Y座標を整える
+Scene.prototype.configureLabelsByType = function(container){
+  const d = container?._data || {};
+  const name = container._labelName;
+  const val  = container._labelPower;
+
+  // まず非表示でクリア
+  name.setVisible(false).setText('');
+  val.setVisible(false).setText('');
+
+  switch (d.type) {
+    case 'shikigami': {
+      // 上部の「カード<番号>」は出さない
+      // 下部に力量のみ（500/1000/1500）
+      val.setY(LABEL_Y.VALUE_BOT);
+      val.setText(d.power != null ? String(d.power) : '');
+      val.setVisible(true);
+      break;
+    }
+    case 'jyutsu': {
+      // 上部は出さない（フレーム画像に「術式」表記がある）
+      // 下部に術式の種類（結界/祓い/封印/解呪）
+      val.setY(LABEL_Y.JYUTSU_BOT);
+      const kindText = d.spellKind && (SPELL_NAME?.[d.spellKind] || '');
+      val.setText(kindText || '');
+      val.setVisible(true);
+      break;
+    }
+    case 'power': {
+      // 画像自体に「500／力量」が描かれているため重ねるテキストは全て非表示
+      break;
+    }
+    default: {
+      // 何もしない（保険）
+      break;
+    }
+  }
+};
```

### 2-4. 既存の「カード表面更新」処理がある場合は最後に呼ぶ

```diff
- updateCardFace(container, patch) {
+ updateCardFace(container, patch) {
    if (!container?._data) return;
    Object.assign(container._data, patch);
    if (patch.type) {
      const key = frameKeyByType(container._data.type);
      container._frame.setTexture(key);
    }
-   // 旧：個別に setText していたら削除
-   // container._labelName.setText(...); container._labelPower.setText(...);
+   // タイプ別ルールで可視・配置・文言を再適用
+   this.configureLabelsByType(container);
  }
```

---

## 3) 受け入れ条件（これでOK）

* 力量カード：画像の「500／力量」だけが見え、テキストの重なりは**消えている**
* 式神カード：上部の「カード<番号>」は**表示されない**／下部に**力量**のみ表示
* 術式カード：上部にテキストは**出ず**、下部に**結界/祓い/封印/解呪**が表示され、フレームの「術式」と**重ならない**

